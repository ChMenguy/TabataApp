{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, element) {\n  var savedHandler = useRef();\n  useEffect(function () {\n    var targetElement = (element === null || element === void 0 ? void 0 : element.current) || window;\n\n    if (!(targetElement && targetElement.addEventListener)) {\n      return;\n    }\n\n    if (savedHandler.current !== handler) {\n      savedHandler.current = handler;\n    }\n\n    var eventListener = function (event) {\n      if (!!(savedHandler === null || savedHandler === void 0 ? void 0 : savedHandler.current)) {\n        savedHandler.current(event);\n      }\n    };\n\n    targetElement.addEventListener(eventName, eventListener);\n    return function () {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element, handler]);\n}\n\nexport default useEventListener;","map":{"version":3,"sources":["../../src/useEventListener/useEventListener.ts"],"names":[],"mappings":"AAAA,SAAoB,SAApB,EAA+B,MAA/B,QAA6C,OAA7C;;AAEA,SAAS,gBAAT,CACE,SADF,EAEE,OAFF,EAGE,OAHF,EAGwB;AAGtB,MAAM,YAAY,GAAG,MAAM,EAA3B;AAEA,EAAA,SAAS,CAAC,YAAA;AAER,QAAM,aAAa,GAAe,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,OAAT,KAAoB,MAAtD;;AACA,QAAI,EAAE,aAAa,IAAI,aAAa,CAAC,gBAAjC,CAAJ,EAAwD;AACtD;AACD;;AAGD,QAAI,YAAY,CAAC,OAAb,KAAyB,OAA7B,EAAsC;AACpC,MAAA,YAAY,CAAC,OAAb,GAAuB,OAAvB;AACD;;AAGD,QAAM,aAAa,GAAG,UAAC,KAAD,EAAa;AAEjC,UAAI,CAAC,EAAC,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,OAAf,CAAL,EAA6B;AAC3B,QAAA,YAAY,CAAC,OAAb,CAAqB,KAArB;AACD;AACF,KALD;;AAOA,IAAA,aAAa,CAAC,gBAAd,CAA+B,SAA/B,EAA0C,aAA1C;AAGA,WAAO,YAAA;AACL,MAAA,aAAa,CAAC,mBAAd,CAAkC,SAAlC,EAA6C,aAA7C;AACD,KAFD;AAGD,GA1BQ,EA0BN,CAAC,SAAD,EAAY,OAAZ,EAAqB,OAArB,CA1BM,CAAT;AA2BD;;AAED,eAAe,gBAAf","sourceRoot":"","sourcesContent":["import { useEffect, useRef } from 'react';\nfunction useEventListener(eventName, handler, element) {\n    var savedHandler = useRef();\n    useEffect(function () {\n        var targetElement = (element === null || element === void 0 ? void 0 : element.current) || window;\n        if (!(targetElement && targetElement.addEventListener)) {\n            return;\n        }\n        if (savedHandler.current !== handler) {\n            savedHandler.current = handler;\n        }\n        var eventListener = function (event) {\n            if (!!(savedHandler === null || savedHandler === void 0 ? void 0 : savedHandler.current)) {\n                savedHandler.current(event);\n            }\n        };\n        targetElement.addEventListener(eventName, eventListener);\n        return function () {\n            targetElement.removeEventListener(eventName, eventListener);\n        };\n    }, [eventName, element, handler]);\n}\nexport default useEventListener;\n//# sourceMappingURL=useEventListener.js.map"]},"metadata":{},"sourceType":"module"}