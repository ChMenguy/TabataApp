{"ast":null,"code":"import { useEffect, useLayoutEffect, useState } from 'react';\n\nfunction useLockedBody(initialLocked) {\n  if (initialLocked === void 0) {\n    initialLocked = false;\n  }\n\n  var _a = useState(initialLocked),\n      locked = _a[0],\n      setLocked = _a[1];\n\n  useLayoutEffect(function () {\n    if (!locked) {\n      return;\n    }\n\n    var originalOverflow = document.body.style.overflow;\n    var originalPaddingRight = document.body.style.paddingRight;\n    document.body.style.overflow = 'hidden';\n    var root = document.getElementById('___gatsby');\n    var scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0;\n\n    if (scrollBarWidth) {\n      document.body.style.paddingRight = scrollBarWidth + \"px\";\n    }\n\n    return function () {\n      document.body.style.overflow = originalOverflow;\n\n      if (scrollBarWidth) {\n        document.body.style.paddingRight = originalPaddingRight;\n      }\n    };\n  }, [locked]);\n  useEffect(function () {\n    if (locked !== initialLocked) {\n      setLocked(initialLocked);\n    }\n  }, [initialLocked]);\n  return [locked, setLocked];\n}\n\nexport default useLockedBody;","map":{"version":3,"sources":["../../src/useLockedBody/useLockedBody.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,eAApB,EAAqC,QAArC,QAAqD,OAArD;;AAIA,SAAS,aAAT,CAAuB,aAAvB,EAA4C;AAArB,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,KAAA;AAAqB;;AACpC,MAAA,EAAA,GAAsB,QAAQ,CAAC,aAAD,CAA9B;AAAA,MAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;AAAA,MAAS,SAAS,GAAA,EAAA,CAAA,CAAA,CAAlB;;AAGN,EAAA,eAAe,CAAC,YAAA;AACd,QAAI,CAAC,MAAL,EAAa;AACX;AACD;;AAGD,QAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,QAA7C;AACA,QAAM,oBAAoB,GAAG,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,YAAjD;AAGA,IAAA,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,QAApB,GAA+B,QAA/B;AAGA,QAAM,IAAI,GAAG,QAAQ,CAAC,cAAT,CAAwB,WAAxB,CAAb;AACA,QAAM,cAAc,GAAG,IAAI,GAAG,IAAI,CAAC,WAAL,GAAmB,IAAI,CAAC,WAA3B,GAAyC,CAApE;;AAGA,QAAI,cAAJ,EAAoB;AAClB,MAAA,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,YAApB,GAAsC,cAAc,GAAA,IAApD;AACD;;AAED,WAAO,YAAA;AACL,MAAA,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,QAApB,GAA+B,gBAA/B;;AAEA,UAAI,cAAJ,EAAoB;AAClB,QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAoB,YAApB,GAAmC,oBAAnC;AACD;AACF,KAND;AAOD,GA5Bc,EA4BZ,CAAC,MAAD,CA5BY,CAAf;AA+BA,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,MAAM,KAAK,aAAf,EAA8B;AAC5B,MAAA,SAAS,CAAC,aAAD,CAAT;AACD;AAEF,GALQ,EAKN,CAAC,aAAD,CALM,CAAT;AAOA,SAAO,CAAC,MAAD,EAAS,SAAT,CAAP;AACD;;AAED,eAAe,aAAf","sourceRoot":"","sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\nfunction useLockedBody(initialLocked) {\n    if (initialLocked === void 0) { initialLocked = false; }\n    var _a = useState(initialLocked), locked = _a[0], setLocked = _a[1];\n    useLayoutEffect(function () {\n        if (!locked) {\n            return;\n        }\n        var originalOverflow = document.body.style.overflow;\n        var originalPaddingRight = document.body.style.paddingRight;\n        document.body.style.overflow = 'hidden';\n        var root = document.getElementById('___gatsby');\n        var scrollBarWidth = root ? root.offsetWidth - root.scrollWidth : 0;\n        if (scrollBarWidth) {\n            document.body.style.paddingRight = scrollBarWidth + \"px\";\n        }\n        return function () {\n            document.body.style.overflow = originalOverflow;\n            if (scrollBarWidth) {\n                document.body.style.paddingRight = originalPaddingRight;\n            }\n        };\n    }, [locked]);\n    useEffect(function () {\n        if (locked !== initialLocked) {\n            setLocked(initialLocked);\n        }\n    }, [initialLocked]);\n    return [locked, setLocked];\n}\nexport default useLockedBody;\n//# sourceMappingURL=useLockedBody.js.map"]},"metadata":{},"sourceType":"module"}