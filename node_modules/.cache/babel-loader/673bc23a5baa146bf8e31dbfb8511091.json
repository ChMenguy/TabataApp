{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nfunction useHover(elementRef) {\n  var _a = useState(false),\n      value = _a[0],\n      setValue = _a[1];\n\n  var handleMouseEnter = function () {\n    return setValue(true);\n  };\n\n  var handleMouseLeave = function () {\n    return setValue(false);\n  };\n\n  useEffect(function () {\n    var node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n\n    if (node) {\n      node.addEventListener('mouseenter', handleMouseEnter);\n      node.addEventListener('mouseleave', handleMouseLeave);\n      return function () {\n        node.removeEventListener('mouseenter', handleMouseEnter);\n        node.removeEventListener('mouseleave', handleMouseLeave);\n      };\n    }\n  }, [elementRef]);\n  return value;\n}\n\nexport default useHover;","map":{"version":3,"sources":["../../src/useHover/useHover.ts"],"names":[],"mappings":"AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;;AAEA,SAAS,QAAT,CACE,UADF,EAC0B;AAElB,MAAA,EAAA,GAAoB,QAAQ,CAAU,KAAV,CAA5B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AAEN,MAAM,gBAAgB,GAAG,YAAA;AAAM,WAAA,QAAQ,CAAR,IAAQ,CAAR;AAAc,GAA7C;;AACA,MAAM,gBAAgB,GAAG,YAAA;AAAM,WAAA,QAAQ,CAAR,KAAQ,CAAR;AAAe,GAA9C;;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,QAAM,IAAI,GAAG,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,OAAzB;;AAEA,QAAI,IAAJ,EAAU;AACR,MAAA,IAAI,CAAC,gBAAL,CAAsB,YAAtB,EAAoC,gBAApC;AACA,MAAA,IAAI,CAAC,gBAAL,CAAsB,YAAtB,EAAoC,gBAApC;AAEA,aAAO,YAAA;AACL,QAAA,IAAI,CAAC,mBAAL,CAAyB,YAAzB,EAAuC,gBAAvC;AACA,QAAA,IAAI,CAAC,mBAAL,CAAyB,YAAzB,EAAuC,gBAAvC;AACD,OAHD;AAID;AACF,GAZQ,EAYN,CAAC,UAAD,CAZM,CAAT;AAcA,SAAO,KAAP;AACD;;AAED,eAAe,QAAf","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nfunction useHover(elementRef) {\n    var _a = useState(false), value = _a[0], setValue = _a[1];\n    var handleMouseEnter = function () { return setValue(true); };\n    var handleMouseLeave = function () { return setValue(false); };\n    useEffect(function () {\n        var node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n        if (node) {\n            node.addEventListener('mouseenter', handleMouseEnter);\n            node.addEventListener('mouseleave', handleMouseLeave);\n            return function () {\n                node.removeEventListener('mouseenter', handleMouseEnter);\n                node.removeEventListener('mouseleave', handleMouseLeave);\n            };\n        }\n    }, [elementRef]);\n    return value;\n}\nexport default useHover;\n//# sourceMappingURL=useHover.js.map"]},"metadata":{},"sourceType":"module"}