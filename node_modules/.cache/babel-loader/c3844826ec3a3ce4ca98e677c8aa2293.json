{"ast":null,"code":"var _jsxFileName = \"/Users/christophe/Documents/GitHub/TabataApp/src/screens/Workout.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { Context } from \"../store/Store\";\nimport Layout from \"../layout/Layout\";\nimport CircleProgression from \"../composants/CircleProgression\";\nimport { useInterval } from \"usehooks-ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Workout() {\n  _s();\n\n  const {\n    app,\n    dispatch\n  } = React.useContext(Context);\n  let [rounds, setRounds] = useState(app.workout.rounds);\n  let [countWork, setCountWork] = useState(app.workout.worktime);\n  let [countRest, setCountRest] = useState(app.workout.resttime);\n  const [work, setWork] = useState(true);\n  const [finish, setFinish] = useState(false);\n  useEffect(() => {\n    if (rounds == 0) {\n      setFinish(true);\n    }\n  }, []);\n  useInterval(() => {\n    if (work) {\n      if (countWork == 1) {\n        setWork(false);\n      } else {\n        setCountWork(countWork - 1);\n      }\n    } else {\n      if (countRest == 1) {\n        setWork(true);\n      } else {\n        setCountRest(countRest - 1);\n        setRounds(rounds - 1);\n      }\n    }\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(CircleProgression, {\n      time: work ? countWork : countRest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Workout, \"xMcYpexyuPXnPhu67dsGuxULmNg=\", false, function () {\n  return [useInterval];\n});\n\n_c = Workout;\nexport default Workout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Workout\");","map":{"version":3,"sources":["/Users/christophe/Documents/GitHub/TabataApp/src/screens/Workout.jsx"],"names":["React","useEffect","useState","ReactAudioPlayer","Context","Layout","CircleProgression","useInterval","Workout","app","dispatch","useContext","rounds","setRounds","workout","countWork","setCountWork","worktime","countRest","setCountRest","resttime","work","setWork","finish","setFinish"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,SAASC,OAAT,GAAkB;AAAA;;AAEd,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAoBV,KAAK,CAACW,UAAN,CAAiBP,OAAjB,CAA1B;AAEA,MAAI,CAACQ,MAAD,EAAQC,SAAR,IAAoBX,QAAQ,CAACO,GAAG,CAACK,OAAJ,CAAYF,MAAb,CAAhC;AACA,MAAI,CAACG,SAAD,EAAWC,YAAX,IAA0Bd,QAAQ,CAACO,GAAG,CAACK,OAAJ,CAAYG,QAAb,CAAtC;AACA,MAAI,CAACC,SAAD,EAAWC,YAAX,IAA0BjB,QAAQ,CAACO,GAAG,CAACK,OAAJ,CAAYM,QAAb,CAAtC;AAEA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBpB,QAAQ,CAAC,IAAD,CAA/B;AACA,QAAM,CAACqB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGW,MAAM,IAAE,CAAX,EAAa;AACTY,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ,GAJQ,EAIP,EAJO,CAAT;AAMAjB,EAAAA,WAAW,CACP,MAAM;AACF,QAAGc,IAAH,EAAQ;AACJ,UAAGN,SAAS,IAAE,CAAd,EAAgB;AACZO,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH,OAFD,MAEO;AACHN,QAAAA,YAAY,CAACD,SAAS,GAAC,CAAX,CAAZ;AACH;AAEJ,KAPD,MAOO;AACH,UAAGG,SAAS,IAAE,CAAd,EAAgB;AACZI,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAFD,MAEM;AACFH,QAAAA,YAAY,CAACD,SAAS,GAAC,CAAX,CAAZ;AACAL,QAAAA,SAAS,CAACD,MAAM,GAAC,CAAR,CAAT;AACH;AACJ;AACJ,GAjBM,EAkBP,IAlBO,CAAX;AAsBA,sBACI,QAAC,MAAD;AAAA,2BACI,QAAC,iBAAD;AACI,MAAA,IAAI,EAAES,IAAI,GAAGN,SAAH,GAAeG;AAD7B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GA9CQV,O;UAiBLD,W;;;KAjBKC,O;AAgDT,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\n\nimport { Context } from \"../store/Store\";\n\nimport Layout from \"../layout/Layout\";\nimport CircleProgression from \"../composants/CircleProgression\";\nimport { useInterval } from \"usehooks-ts\";\n\nfunction Workout(){\n\n    const { app, dispatch } = React.useContext(Context);\n  \n    let [rounds,setRounds]= useState(app.workout.rounds)\n    let [countWork,setCountWork]= useState(app.workout.worktime)\n    let [countRest,setCountRest]= useState(app.workout.resttime)\n\n    const [work,setWork] = useState(true)\n    const [finish, setFinish] = useState(false)\n\n    useEffect(()=>{\n        if(rounds==0){\n            setFinish(true)\n        }\n    },[])\n\n    useInterval(\n        () => {\n            if(work){       \n                if(countWork==1){\n                    setWork(false) \n                } else {\n                    setCountWork(countWork-1)    \n                }\n                \n            } else {\n                if(countRest==1){\n                    setWork(true)\n                } else{\n                    setCountRest(countRest-1)\n                    setRounds(rounds-1)\n                }\n            }           \n        },\n        1000,\n    )\n\n\n    return(\n        <Layout>\n            <CircleProgression \n                time={work ? countWork : countRest}\n            />\n        </Layout>\n    )\n}\n\nexport default Workout"]},"metadata":{},"sourceType":"module"}