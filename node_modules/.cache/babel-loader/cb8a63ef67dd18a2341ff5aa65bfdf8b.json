{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nfunction useIntersectionObserver(elementRef, _a) {\n  var _b = _a.threshold,\n      threshold = _b === void 0 ? 0 : _b,\n      _c = _a.root,\n      root = _c === void 0 ? null : _c,\n      _d = _a.rootMargin,\n      rootMargin = _d === void 0 ? '0%' : _d,\n      _e = _a.freezeOnceVisible,\n      freezeOnceVisible = _e === void 0 ? false : _e;\n\n  var _f = useState(),\n      entry = _f[0],\n      setEntry = _f[1];\n\n  var frozen = (entry === null || entry === void 0 ? void 0 : entry.isIntersecting) && freezeOnceVisible;\n\n  var updateEntry = function (_a) {\n    var entry = _a[0];\n    setEntry(entry);\n  };\n\n  useEffect(function () {\n    var node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n    var hasIOSupport = !!window.IntersectionObserver;\n    if (!hasIOSupport || frozen || !node) return;\n    var observerParams = {\n      threshold: threshold,\n      root: root,\n      rootMargin: rootMargin\n    };\n    var observer = new IntersectionObserver(updateEntry, observerParams);\n    observer.observe(node);\n    return function () {\n      return observer.disconnect();\n    };\n  }, [elementRef, threshold, root, rootMargin, frozen]);\n  return entry;\n}\n\nexport default useIntersectionObserver;","map":{"version":3,"sources":["../../src/useIntersectionObserver/useIntersectionObserver.ts"],"names":[],"mappings":"AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;;AAMA,SAAS,uBAAT,CACE,UADF,EAEE,EAFF,EAOS;MAJL,EAAA,GAAA,EAAA,CAAA,S;MAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAH,GAAI,E;MACb,EAAA,GAAA,EAAA,CAAA,I;MAAA,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;MACX,EAAA,GAAA,EAAA,CAAA,U;MAAA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;MACjB,EAAA,GAAA,EAAA,CAAA,iB;MAAA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;;AAGrB,MAAA,EAAA,GAAoB,QAAQ,EAA5B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AAEN,MAAM,MAAM,GAAG,CAAA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,cAAP,KAAyB,iBAAxC;;AAEA,MAAM,WAAW,GAAG,UAAC,EAAD,EAAqC;QAAnC,KAAK,GAAA,EAAA,CAAA,CAAA,C;AACzB,IAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAFD;;AAIA,EAAA,SAAS,CAAC,YAAA;AACR,QAAM,IAAI,GAAG,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAA,UAAU,CAAE,OAAzB;AACA,QAAM,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,oBAA9B;AAEA,QAAI,CAAC,YAAD,IAAiB,MAAjB,IAA2B,CAAC,IAAhC,EAAsC;AAEtC,QAAM,cAAc,GAAG;AAAE,MAAA,SAAS,EAAA,SAAX;AAAa,MAAA,IAAI,EAAA,IAAjB;AAAmB,MAAA,UAAU,EAAA;AAA7B,KAAvB;AACA,QAAM,QAAQ,GAAG,IAAI,oBAAJ,CAAyB,WAAzB,EAAsC,cAAtC,CAAjB;AAEA,IAAA,QAAQ,CAAC,OAAT,CAAiB,IAAjB;AAEA,WAAO,YAAA;AAAM,aAAA,QAAQ,CAAR,UAAA,EAAA;AAAqB,KAAlC;AAGD,GAdQ,EAcN,CAAC,UAAD,EAAa,SAAb,EAAwB,IAAxB,EAA8B,UAA9B,EAA0C,MAA1C,CAdM,CAAT;AAgBA,SAAO,KAAP;AACD;;AAED,eAAe,uBAAf","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nfunction useIntersectionObserver(elementRef, _a) {\n    var _b = _a.threshold, threshold = _b === void 0 ? 0 : _b, _c = _a.root, root = _c === void 0 ? null : _c, _d = _a.rootMargin, rootMargin = _d === void 0 ? '0%' : _d, _e = _a.freezeOnceVisible, freezeOnceVisible = _e === void 0 ? false : _e;\n    var _f = useState(), entry = _f[0], setEntry = _f[1];\n    var frozen = (entry === null || entry === void 0 ? void 0 : entry.isIntersecting) && freezeOnceVisible;\n    var updateEntry = function (_a) {\n        var entry = _a[0];\n        setEntry(entry);\n    };\n    useEffect(function () {\n        var node = elementRef === null || elementRef === void 0 ? void 0 : elementRef.current;\n        var hasIOSupport = !!window.IntersectionObserver;\n        if (!hasIOSupport || frozen || !node)\n            return;\n        var observerParams = { threshold: threshold, root: root, rootMargin: rootMargin };\n        var observer = new IntersectionObserver(updateEntry, observerParams);\n        observer.observe(node);\n        return function () { return observer.disconnect(); };\n    }, [elementRef, threshold, root, rootMargin, frozen]);\n    return entry;\n}\nexport default useIntersectionObserver;\n//# sourceMappingURL=useIntersectionObserver.js.map"]},"metadata":{},"sourceType":"module"}